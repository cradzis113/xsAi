const puppeteer = require('puppeteer-core');
const os = require('os');

// C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n Chrome d·ª±a tr√™n h·ªá ƒëi·ªÅu h√†nh
function getChromePath() {
    return os.platform() === 'win32'
        ? 'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe'
        : '/usr/bin/google-chrome';
}

const CONFIG = {
    CHROME_PATH: getChromePath(),
    URL: 'https://bet.6nluck8.cc/home/?inviteCode=4592386#/lottery?tabName=Lottery&id=47',
    SELECTORS: {
        secondLastDigit: '._timeDown .vue-count-time .time span:nth-last-child(2)',
        lastDigit: '._timeDown .vue-count-time .time span:last-child'
    }
};

/**
 * Kh·ªüi t·∫°o tr√¨nh duy·ªát v·ªõi c·∫•u h√¨nh t·ªëi thi·ªÉu
 */
async function launchBrowser() {
    const isLinux = os.platform() === 'linux';
    const browser = await puppeteer.launch({
        executablePath: CONFIG.CHROME_PATH,
        headless: true,
        args: [
            '--disable-dev-shm-usage',
            '--disable-gpu',
            '--no-sandbox',
            '--disable-setuid-sandbox',
            ...(isLinux ? ['--window-size=1920x1080'] : [])
        ]
    });
    return browser;
}

/**
 * M·ªü trang c√° c∆∞·ª£c v√† thi·∫øt l·∫≠p c·∫•u h√¨nh c∆° b·∫£n
 */
async function openBettingPage(browser) {
    try {
        const page = await browser.newPage();
        await page.setDefaultNavigationTimeout(60000);

        await page.goto(CONFIG.URL, {
            waitUntil: 'networkidle2',
            timeout: 60000
        });

        return page;
    } catch (error) {
        console.error('L·ªói khi m·ªü trang betting:', error.message);
        throw error;
    }
}

/**
 * Theo d√µi th·ªùi gian ƒë·∫øm ng∆∞·ª£c v√† th·ª±c hi·ªán d·ª± ƒëo√°n
 * @param {Page} page - Trang web ƒëang m·ªü
 * @param {Function} predictFunction - H√†m d·ª± ƒëo√°n s·ªë
 */
async function getCountDownTime(page, predictFunction) {
    console.log('‚úÖ B·∫Øt ƒë·∫ßu theo d√µi countdown...');

    let isPredicting = false;
    let hasPredicted = false;
    let lastSeconds = -1;
    let errorCount = 0;
    const MAX_ERRORS = 5;
    const ERROR_RESET_INTERVAL = 60000; // 1 ph√∫t

    const intervalId = setInterval(async () => {
        if (page.isClosed()) {
            console.log('‚ùå Page ƒë√£ b·ªã ƒë√≥ng, d·ª´ng theo d√µi countdown');
            clearInterval(intervalId);
            return;
        }

        try {
            // Reset error count periodically
            if (errorCount > 0) {
                setTimeout(() => {
                    errorCount = 0;
                }, ERROR_RESET_INTERVAL);
            }

            // L·∫•y th·ªùi gian ƒë·∫øm ng∆∞·ª£c
            const [secondLastDigit, lastDigit] = await Promise.all([
                page.$eval(CONFIG.SELECTORS.secondLastDigit, el => el.textContent),
                page.$eval(CONFIG.SELECTORS.lastDigit, el => el.textContent)
            ]);

            const seconds = parseInt(secondLastDigit + lastDigit);

            // Ki·ªÉm tra t√≠nh h·ª£p l·ªá c·ªßa th·ªùi gian
            if (isNaN(seconds) || seconds < 0 || seconds > 180) {
                throw new Error(`Th·ªùi gian kh√¥ng h·ª£p l·ªá: ${seconds}`);
            }

            // Log th·ªùi gian n·∫øu c√≥ thay ƒë·ªïi
            if (seconds !== lastSeconds) {
                console.log("‚è≥ C√≤n l·∫°i:", seconds, "gi√¢y");
                lastSeconds = seconds;
                errorCount = 0; // Reset error count on successful update
            }

            // Reset tr·∫°ng th√°i khi b·∫Øt ƒë·∫ßu k·ª≥ m·ªõi
            if (lastSeconds === 0 && seconds > 30) {
                console.log("üîÑ K·ª≥ m·ªõi b·∫Øt ƒë·∫ßu!");
                hasPredicted = false;
                errorCount = 0;
            }

            // Th·ª±c hi·ªán d·ª± ƒëo√°n trong kho·∫£ng th·ªùi gian ph√π h·ª£p
            if (seconds >= 15 && seconds <= 28 && !isPredicting && !hasPredicted) {
                console.log("üéØ B·∫Øt ƒë·∫ßu d·ª± ƒëo√°n...");
                isPredicting = true;
                hasPredicted = true;

                try {
                    await predictFunction();
                } catch (error) {
                    console.error("‚ùå L·ªói d·ª± ƒëo√°n:", error.message);
                    errorCount++;
                } finally {
                    isPredicting = false;
                }
            }

            // Reset d·ª± ƒëo√°n khi g·∫ßn k·∫øt th√∫c
            if (seconds <= 1) {
                hasPredicted = false;
            }

        } catch (error) {
            console.error("‚ö†Ô∏è L·ªói ƒë·ªçc countdown:", error.message);
            errorCount++;

            // N·∫øu c√≥ qu√° nhi·ªÅu l·ªói li√™n ti·∫øp, th·ª≠ reload page
            if (errorCount >= MAX_ERRORS) {
                console.log("üîÑ ƒêang th·ª≠ reload page do c√≥ nhi·ªÅu l·ªói...");
                try {
                    await page.reload({ waitUntil: 'networkidle2' });
                    errorCount = 0;
                } catch (reloadError) {
                    console.error("‚ùå Kh√¥ng th·ªÉ reload page:", reloadError.message);
                }
            }
        }
    }, 1000);

    return intervalId;
}

module.exports = {
    launchBrowser,
    openBettingPage,
    getCountDownTime
}; 